// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String         @unique
  emailVerified      DateTime?
  image              String?
  subscriptionStatus String         @default("none")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  accounts     Account[]
  sessions     Session[]
  orders       Order[]
  progress     UserProgress[]
  subscription Subscription?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Course {
  id           String         @id @default(cuid())
  title        String
  description  String         @db.Text
  slug         String         @unique
  category     String
  difficulty   String
  duration     Int            // in minutes
  price        Float
  thumbnailUrl String
  instructorId String
  isPublished  Boolean        @default(false)
  tags         String[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  modules    CourseModule[]
  orderItems OrderItem[]
  progress   UserProgress[]

  @@map("courses")
}

model CourseModule {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text // markdown content
  order     Int
  duration  Int      // in minutes
  isPreview Boolean  @default(false)
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course   Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress UserProgress[]

  @@map("course_modules")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  totalAmount Float
  status      String      @default("pending") // pending, completed, failed, refunded
  paymentId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  courseId String
  price    Float

  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Subscription {
  id                 String   @id @default(cuid())
  userId             String   @unique
  plan               String   // basic, premium, enterprise
  status             String   // active, cancelled, expired
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model UserProgress {
  id             String    @id @default(cuid())
  userId         String
  courseId       String
  moduleId       String
  completedAt    DateTime?
  timeSpent      Int       @default(0) // in seconds
  lastAccessedAt DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, moduleId])
  @@map("user_progress")
}
