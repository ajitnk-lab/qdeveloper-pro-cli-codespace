// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String         @unique
  emailVerified      DateTime?
  image              String?
  subscriptionStatus String         @default("none")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  accounts           Account[]
  sessions           Session[]
  orders             Order[]
  subscriptions      Subscription[]
  progress           UserProgress[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Course {
  id           String         @id @default(cuid())
  title        String
  description  String
  slug         String         @unique
  imageUrl     String?
  price        Float
  category     String
  difficulty   String
  duration     Int // in minutes
  instructor   String
  isPublished  Boolean        @default(false)
  tags         String // JSON string for SQLite
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  modules      CourseModule[]
  orderItems   OrderItem[]
  progress     UserProgress[]

  @@map("courses")
}

model CourseModule {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  content     String // markdown content
  order       Int
  duration    Int // in minutes
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_modules")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  totalAmount Float
  status      String      @default("pending")
  paymentId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  courseId String
  price    Float
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Subscription {
  id                  String   @id @default(cuid())
  userId              String
  plan                String
  status              String
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean  @default(false)
  subscriptionId      String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model UserProgress {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  moduleId     String?
  completed    Boolean  @default(false)
  timeSpent    Int      @default(0) // in minutes
  lastAccessed DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, moduleId])
  @@map("user_progress")
}
